"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Switch } from "@/components/ui/switch"
import { Separator } from "@/components/ui/separator"
import { createClient } from "@/lib/supabase"
import { useToast } from "@/hooks/use-toast"
import { useTheme } from "next-themes"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface ConfiguracionData {
  id: string
  nombre_negocio: string
  direccion: string | null
  telefono: string | null
  email_contacto: string | null
  iva_porcentaje: number
  impresion_automatica: boolean
  ultima_actualizacion: string
}

export function Configuracion() {
  const [config, setConfig] = useState<ConfiguracionData | null>(null)
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const supabase = createClient()
  const { toast } = useToast()
  const { theme, setTheme } = useTheme()

  useEffect(() => {
    fetchConfiguracion()
  }, [])

  const fetchConfiguracion = async () => {
    setLoading(true)
    const { data, error } = await supabase.from("configuracion").select("*").single()
    if (error && error.code !== "PGRST116") {
      // PGRST116 means no rows found, which is fine for first run
      toast({
        title: "Error",
        description: "Error al cargar configuración: " + error.message,
        variant: "destructive",
      })
    } else if (data) {
      setConfig(data)
    } else {
      // Initialize with default values if no config found
      setConfig({
        id: "", // Will be generated by Supabase if inserting
        nombre_negocio: "",
        direccion: "",
        telefono: "",
        email_contacto: "",
        iva_porcentaje: 21, // Default IVA
        impresion_automatica: false,
        ultima_actualizacion: new Date().toISOString(),
      })
    }
    setLoading(false)
  }

  const handleSaveConfiguracion = async () => {
    if (!config) return

    setSaving(true)
    let error = null
    let data = null

    if (config.id) {
      // Update existing
      const { data: updateData, error: updateError } = await supabase
        .from("configuracion")
        .update({
          nombre_negocio: config.nombre_negocio,
          direccion: config.direccion,
          telefono: config.telefono,
          email_contacto: config.email_contacto,
          iva_porcentaje: config.iva_porcentaje,
          impresion_automatica: config.impresion_automatica,
          ultima_actualizacion: new Date().toISOString(),
        })
        .eq("id", config.id)
        .select()
        .single()
      data = updateData
      error = updateError
    } else {
      // Insert new
      const { data: insertData, error: insertError } = await supabase
        .from("configuracion")
        .insert({
          nombre_negocio: config.nombre_negocio,
          direccion: config.direccion,
          telefono: config.telefono,
          email_contacto: config.email_contacto,
          iva_porcentaje: config.iva_porcentaje,
          impresion_automatica: config.impresion_automatica,
          ultima_actualizacion: new Date().toISOString(),
        })
        .select()
        .single()
      data = insertData
      error = insertError
    }

    if (error) {
      toast({
        title: "Error",
        description: "Error al guardar configuración: " + error.message,
        variant: "destructive",
      })
    } else {
      toast({
        title: "Éxito",
        description: "Configuración guardada correctamente.",
      })
      setConfig(data) // Update state with new ID if inserted
    }
    setSaving(false)
  }

  if (loading) {
    return (
      <Card className="w-full">
        <CardHeader>
          <CardTitle>Cargando Configuración...</CardTitle>
        </CardHeader>
        <CardContent>Cargando datos de configuración...</CardContent>
      </Card>
    )
  }

  if (!config) {
    return (
      <Card className="w-full">
        <CardHeader>
          <CardTitle>Error al Cargar Configuración</CardTitle>
        </CardHeader>
        <CardContent>No se pudo cargar la configuración. Intente recargar la página.</CardContent>
      </Card>
    )
  }

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>Configuración del Sistema</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="flex items-center justify-between">
          <Label htmlFor="dark-mode-switch">Modo Oscuro</Label>
          <Switch
            id="dark-mode-switch"
            checked={theme === "dark"}
            onCheckedChange={(checked) => setTheme(checked ? "dark" : "light")}
          />
        </div>
        <div className="flex items-center justify-between">
          <Label htmlFor="theme-select">Tema</Label>
          <Select value={theme} onValueChange={setTheme}>
            <SelectTrigger id="theme-select" className="w-[180px]">
              <SelectValue placeholder="Selecciona un tema" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="light">Claro</SelectItem>
              <SelectItem value="dark">Oscuro</SelectItem>
              <SelectItem value="system">Sistema</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <Separator />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="nombre-negocio">Nombre del Negocio</Label>
            <Input
              id="nombre-negocio"
              value={config.nombre_negocio || ""}
              onChange={(e) => setConfig({ ...config, nombre_negocio: e.target.value })}
            />
          </div>
          <div>
            <Label htmlFor="direccion">Dirección</Label>
            <Input
              id="direccion"
              value={config.direccion || ""}
              onChange={(e) => setConfig({ ...config, direccion: e.target.value })}
            />
          </div>
          <div>
            <Label htmlFor="telefono">Teléfono</Label>
            <Input
              id="telefono"
              value={config.telefono || ""}
              onChange={(e) => setConfig({ ...config, telefono: e.target.value })}
            />
          </div>
          <div>
            <Label htmlFor="email-contacto">Email de Contacto</Label>
            <Input
              id="email-contacto"
              type="email"
              value={config.email_contacto || ""}
              onChange={(e) => setConfig({ ...config, email_contacto: e.target.value })}
            />
          </div>
        </div>

        <Separator />

        <h3 className="text-lg font-semibold">Opciones de Venta</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <Label htmlFor="iva-porcentaje">Porcentaje de IVA (%)</Label>
            <Input
              id="iva-porcentaje"
              type="number"
              value={config.iva_porcentaje}
              onChange={(e) => setConfig({ ...config, iva_porcentaje: Number.parseFloat(e.target.value) || 0 })}
            />
          </div>
          <div className="flex items-center space-x-2">
            <Switch
              id="impresion-automatica"
              checked={config.impresion_automatica}
              onCheckedChange={(checked) => setConfig({ ...config, impresion_automatica: checked })}
            />
            <Label htmlFor="impresion-automatica">Impresión automática de tickets</Label>
          </div>
        </div>

        <Button onClick={handleSaveConfiguracion} className="w-full" disabled={saving}>
          {saving ? "Guardando..." : "Guardar Configuración"}
        </Button>
      </CardContent>
    </Card>
  )
}
